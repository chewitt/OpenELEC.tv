--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.cpp	2015-07-23 15:04:29.691747447 +0400
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.cpp	2015-07-23 15:42:55.153970735 +0400
@@ -35,7 +35,6 @@
 #include "threads/Atomics.h"
 #include "threads/Thread.h"
 #include "utils/log.h"
-#include "utils/fastmemcpy.h"
 extern "C" {
 #include "libswscale/swscale.h"
 }
@@ -659,14 +658,14 @@
   // copy y
   if (w == stride)
   {
-    fast_memcpy(pBuffer->m_y_buffer_ptr, procOut->Ybuff, w * h);
+    memcpy(pBuffer->m_y_buffer_ptr, procOut->Ybuff, w * h);
   }
   else
   {
     uint8_t *s_y = procOut->Ybuff;
     uint8_t *d_y = pBuffer->m_y_buffer_ptr;
     for (int y = 0; y < h; y++, s_y += stride, d_y += w)
-      fast_memcpy(d_y, s_y, w);
+      memcpy(d_y, s_y, w);
   }
   //copy chroma
   //copy uv packed to u,v planes (1/2 the width and 1/2 the height of y)
@@ -690,9 +689,9 @@
   uint8_t *d_y = pBuffer->m_y_buffer_ptr;
   for (int y = 0; y < h/2; y++, s_y += stride)
   {
-    fast_memcpy(d_y, s_y, w);
+    memcpy(d_y, s_y, w);
     d_y += w;
-    fast_memcpy(d_y, s_y, w);
+    memcpy(d_y, s_y, w);
     d_y += w;
   }
   //copy chroma
@@ -724,9 +723,9 @@
   {
     int bytes = w * h;
     // copy y
-    fast_memcpy(pBuffer->m_y_buffer_ptr, procOut->Ybuff, bytes);
+    memcpy(pBuffer->m_y_buffer_ptr, procOut->Ybuff, bytes);
     // copy uv
-    fast_memcpy(pBuffer->m_uv_buffer_ptr, procOut->UVbuff, bytes/2 );
+    memcpy(pBuffer->m_uv_buffer_ptr, procOut->UVbuff, bytes/2 );
   }
   else
   {
@@ -734,12 +733,12 @@
     uint8_t *s = procOut->Ybuff;
     uint8_t *d = pBuffer->m_y_buffer_ptr;
     for (int y = 0; y < h; y++, s += stride, d += w)
-      fast_memcpy(d, s, w);
+      memcpy(d, s, w);
     // copy uv
     s = procOut->UVbuff;
     d = pBuffer->m_uv_buffer_ptr;
     for (int y = 0; y < h/2; y++, s += stride, d += w)
-      fast_memcpy(d, s, w);
+      memcpy(d, s, w);
   }
 }
 
@@ -751,18 +750,18 @@
   uint8_t *d_y = pBuffer->m_y_buffer_ptr;
   for (int y = 0; y < h/2; y++, s_y += stride)
   {
-    fast_memcpy(d_y, s_y, w);
+    memcpy(d_y, s_y, w);
     d_y += w;
-    fast_memcpy(d_y, s_y, w);
+    memcpy(d_y, s_y, w);
     d_y += w;
   }
   //copy chroma
   uint8_t *s_uv = procOut->UVbuff;
   uint8_t *d_uv = pBuffer->m_uv_buffer_ptr;
   for (int y = 0; y < h/4; y++, s_uv += stride) {
-    fast_memcpy(d_uv, s_uv, w);
+    memcpy(d_uv, s_uv, w);
     d_uv += w;
-    fast_memcpy(d_uv, s_uv, w);
+    memcpy(d_uv, s_uv, w);
     d_uv += w;
   }
   pBuffer->m_interlace = false;
@@ -926,16 +925,16 @@
                   uint8_t *d_y = pBuffer->m_y_buffer_ptr;
                   for (int y = 0; y < h/2; y++, s_y += yuy2_stride)
                   {
-                    fast_memcpy(d_y, s_y, yuy2_w);
+                    memcpy(d_y, s_y, yuy2_w);
                     d_y += yuy2_w;
-                    fast_memcpy(d_y, s_y, yuy2_w);
+                    memcpy(d_y, s_y, yuy2_w);
                     d_y += yuy2_w;
                   }
                   pBuffer->m_interlace = false;
                 }
                 else
                 {
-                  fast_memcpy(pBuffer->m_y_buffer_ptr,  procOut.Ybuff, pBuffer->m_y_buffer_size);
+                  memcpy(pBuffer->m_y_buffer_ptr,  procOut.Ybuff, pBuffer->m_y_buffer_size);
                 }
               break;
               case RENDER_FMT_YUV420P:
